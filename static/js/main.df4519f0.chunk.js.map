{"version":3,"sources":["component/covidGlobalCases.js","component/covidtest.js","App.js","reportWebVitals.js","index.js"],"names":["RandomNumber","Math","floor","random","num_test","CovidGlobalCases","useState","Date","setDate","Data","setData","mostCase","setmostCase","barColor","setbarColor","useEffect","a","CountryName","barColorArr","fetch","then","res","json","DataCountry","forEach","data","index","push","country","color","toString","substr","DataProcess","filter","getDate","Object","keys","timeline","cases","mostCasesArr","mostCases","dayitem","dayindex","dataitem","dataindex","catch","err","console","log","countday","setcountday","setTimeout","className","map","item","topPosition","randColor","style","top","transition","width","parseInt","styled","div","props","total","totalcases","toFixed","space","p","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df4519f0.chunk.js","sourcesContent":["/* eslint-disable no-template-curly-in-string */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React , {useState , useEffect} from 'react'\r\nimport './style.scss'\r\n\r\nfunction RandomNumber () {\r\n    return Math.floor(Math.random() * 100); \r\n}\r\n\r\n\r\nconst num_test = [ \r\n    { \r\n        \"Country\":'1',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'2',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'3',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'4',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'5',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'6',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'7',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'8',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'9',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'10',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n       \r\n]\r\n\r\n  \r\n\r\n\r\nfunction CovidGlobalCases () {\r\n        \r\n        // date 1 month\r\n    const [Date , setDate] = useState([])\r\n        // data country > Country Name , date , cases 1 month\r\n    const [Data , setData] = useState([])\r\n        // Country Name\r\n    const [CountryNameList , setCountryNameList] = useState([])\r\n        // country Position \r\n    const [CountryPosition , setCountryPosition] = useState([])\r\n        // most case\r\n    const [mostCase , setmostCase] = useState([])\r\n        // bar color\r\n    const [barColor, setbarColor] = useState([])\r\n\r\n        // test num\r\n    const [numTest, setnumTest] = useState(num_test)\r\n\r\n        // url get country \r\n    const urlGetCountry = 'https://disease.sh/v3/covid-19/countries?yesterday=false&twoDaysAgo=false&allowNull=false'\r\n        // url get specify > https://disease.sh/v3/covid-19/historical/[country]?lastdays=30\r\n    const urlusa = 'https://disease.sh/v3/covid-19/historical/usa?lastdays=30'\r\n        // url get total cases\r\n    const urlTotalCases = 'https://disease.sh/v3/covid-19/historical/all?lastdays=30';\r\n\r\n    useEffect(async() => {\r\n        const CountryName = [];\r\n        const barColorArr = [];\r\n        // const mostCases = 0;\r\n\r\n            // get name country\r\n        await fetch(urlGetCountry)\r\n        .then(res => res.json())\r\n        .then(DataCountry => {\r\n            DataCountry.forEach((data , index) => {\r\n                // console.log(data.country);\r\n                CountryName.push(data.country)\r\n\r\n                // random color\r\n                let color = '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6)\r\n                barColorArr.push(color)\r\n            });\r\n            // console.log(CountryName);\r\n\r\n                // get data specify country\r\n            fetch('https://disease.sh/v3/covid-19/historical/'+CountryName+'?lastdays=30')\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                // console.log(res);\r\n\r\n                    // delete country empty data\r\n                const DataProcess = res.filter(country => country.country)\r\n                    // get date\r\n                const getDate = Object.keys(DataProcess[0].timeline.cases);\r\n                setDate(getDate)\r\n\r\n                    // set Data\r\n                setData(DataProcess)\r\n                // console.log(Data);\r\n                    // set color\r\n                setbarColor(barColorArr)\r\n\r\n                    // view data\r\n                // console.log('Date : ',Date);\r\n                // console.log('Data : ',Data);\r\n                // console.log('barColor : ',barColor);\r\n\r\n                    // process most cases per day\r\n                const mostCasesArr = [];\r\n                let mostCases = 0;\r\n                Date.forEach((dayitem ,dayindex ) => {\r\n                    Data.forEach((dataitem , dataindex ) => {\r\n                        // console.log('Date : ',dayitem);\r\n                        // console.log('Data : ',dataitem.timeline.cases);\r\n                        if (mostCases <= dataitem.timeline.cases[dayitem] ) {\r\n                            mostCases = dataitem.timeline.cases[dayitem]\r\n                        }\r\n                    })\r\n                    mostCasesArr[dayindex] = mostCases\r\n                })\r\n\r\n                // console.log(mostCasesArr);\r\n                setmostCase(mostCasesArr)\r\n                // console.log(mostCasesArr[0]);\r\n        \r\n            })\r\n            .catch(err => console.log(err))\r\n          \r\n        })\r\n        .catch(err => console.log(err))\r\n\r\n    },[])\r\n\r\n\r\n\r\n        // count day\r\n    const [countday , setcountday] = useState(0)\r\n    useEffect(() => {\r\n        if (countday >= 29 ) {\r\n            setTimeout(()=>{\r\n                setcountday(0)\r\n            },3000)\r\n        } else {\r\n            setTimeout(()=>{\r\n                setcountday(countday + 1 )\r\n            },1000)\r\n        }\r\n    }, [countday])\r\n\r\n    return (\r\n        <div className=\"header\">\r\n                {/* Header title */}\r\n            <div className=\"header-title\">\r\n                <span>COVID GLOBAL CASES</span>\r\n            </div>\r\n                {/* count day */}\r\n            <div className=\"count-day\">\r\n                <span>Day : {Date[countday]} </span>\r\n            </div>\r\n\r\n            <div className=\"test-data\">\r\n                {/* <span>Total cases : {TotalCases.cases['11/3/20']}</span> */}\r\n            </div>\r\n\r\n                {/* chart bar */}\r\n            <div className=\"chart-body\">\r\n                <div className=\"chart-text\">\r\n                    \r\n                        {Data.map((item ,index) => {\r\n                            let cases = item.timeline.cases[Date[countday]];\r\n                            // const barWidth = parseInt((cases/mostCase[countday])*100)+'%'\r\n                            // console.log(barWidth);\r\n                            const topPosition = ''+ index * 60  + 'px'\r\n\r\n                            const randColor = barColor[index]\r\n                            \r\n                            return(\r\n                                <div key={index} className=\"country-bar\" style={{top:topPosition, transition:'all 0.3s'}}>\r\n                                    <div className=\"bg-bar\" style={{'backgroundColor':randColor,width:parseInt((cases/mostCase[countday])*100)+'%', transition:'all 0.3s'}}></div>\r\n                                    <span className=\"country-text\">{item.country} (cases : {cases})  </span>\r\n                                </div>\r\n                            )\r\n                        })}\r\n\r\n                           {/* <div className=\"country-bar\" style={{top:'50px'}}>\r\n                                <div className=\"bg-bar\" style={{backgroundColor:'red',width:'100%', transition:'all 0.3s'}}></div>\r\n                                <span className=\"country-text\">Country_1 cases :95</span>\r\n                            </div>\r\n                            <div className=\"country-bar\" style={{top:'100px'}}>\r\n                                <div className=\"bg-bar\" style={{backgroundColor:'red',width:'70%', transition:'all 0.3s'}}></div>\r\n                                <span className=\"country-text\">Country_2 cases :80</span>\r\n                            </div>\r\n                            <div className=\"country-bar\" style={{top:'150px'}}>\r\n                                <div className=\"bg-bar\" style={{backgroundColor:'red',width:'70%', transition:'all 0.3s'}}></div>\r\n                                <span className=\"country-text\">Country_2 cases :80</span>\r\n                            </div> */}\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CovidGlobalCases;","import React,{useEffect, useState} from 'react'\r\n// import { Helmet } from \"react-helmet\"\r\nimport styled from 'styled-components'\r\nimport './style.scss'\r\n\r\nconst Wrap = styled.div`\r\n    transition: all 0.3s;\r\n    position: relative;\r\n    width:100%;\r\n`\r\n\r\nconst Guage = styled.div`\r\n    position: absolute;\r\n    transition: all 0.3s;\r\n    height: 30px;\r\n    background-color: ${props => props.color};\r\n    width: ${props => parseInt((((props.total*100)/props.totalcases)*5).toFixed(0))}%;\r\n`\r\n\r\nconst Bar = styled.div`\r\n  position: absolute;\r\n  transition: all 0.3s;\r\n  width: 100%;\r\n  top: ${props => props.space*7}%;\r\n`\r\nconst Text = styled.p`\r\n    position : absolute;\r\n    left: 15px;\r\n    top: 7px;\r\n    padding: 0;\r\n    margin : 0;\r\n`\r\n\r\nconst randomColor = () => {\r\n    return '#' + ('00000' + (Math.random() * 16777216 << 0).toString(16)).substr(-6);\r\n}\r\n\r\nexport default function Charts(props) {\r\n\r\n    const [totalcases,setTotalcases] = useState([])\r\n    const [getdate,setDate] = useState([])\r\n    const [count,setCount] = useState(0)\r\n    const [data,setData] = useState([])\r\n    const [color,setColor] = useState([])\r\n    useEffect(()=>{\r\n        fetch('https://disease.sh/v3/covid-19/countries?yesterday=false&twoDaysAgo=false&sort=cases&allowNull=false')\r\n        .then(res=> res.json())\r\n        .then((result)=>{\r\n            let newData = []\r\n            let country = \"\"\r\n            let color = []\r\n            // console.log(result);\r\n            result.forEach((item)=>{ \r\n                newData.push(item.countryInfo.iso3);\r\n                color.push(randomColor())\r\n            });\r\n            country = newData.join(',');\r\n            setColor(color)\r\n            // console.log(color);\r\n            fetch(`https://disease.sh/v3/covid-19/historical/${country}?lastdays=30`)\r\n            .then(res=> res.json())\r\n            .then((results)=>{\r\n                let dataArr = results.filter(item=> item.country)\r\n                let dateList = Object.keys(results[0].timeline.cases)\r\n                setDate(Object.keys(results[0].timeline.cases))\r\n                // console.log(dataArr);\r\n                fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=30')\r\n                .then(res=> res.json())\r\n                .then((dataResult)=>{\r\n                    setTotalcases(dataResult.cases);\r\n                    for(let i = 0; i <= 29; i++) {\r\n                        let element = dataArr.sort((a,b)=> b.timeline.cases[dateList[i]] - a.timeline.cases[dateList[i]])\r\n                        element.forEach((items,index)=>{\r\n                            items[`${dateList[i]}`] = index\r\n                        });\r\n                    }\r\n                    setData(dataArr) \r\n                })\r\n                .catch((err)=>{\r\n                    console.log(err)\r\n                })\r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n            })\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n       \r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(count >= 29) {\r\n            setTimeout(()=>{\r\n                setCount(0)\r\n            },2000)\r\n        } else {\r\n            setTimeout(()=>{\r\n                setCount(count+1)\r\n            },500)\r\n        }\r\n    })\r\n    \r\n    return (\r\n        <>\r\n \r\n            <meta charSet=\"utf-8\" />\r\n            <title>Covid-19 Report</title>\r\n\r\n            <div className={'chart-section'}>\r\n                <div className={'top-section'}>\r\n                    <h1>COVID-19 Global Cases</h1>\r\n                    <h3>Date : {getdate[count]}</h3>\r\n                </div>\r\n                <div className={'data-wrap'}>\r\n                    <div className={'data-section'}>\r\n                        { \r\n                            data\r\n                            .map((item,i)=>{\r\n                            return <Bar key={i} space={item[getdate[count]]} totalcases={totalcases[getdate[count]]} total={item.timeline.cases[getdate[count]]} >\r\n                                    <Wrap>\r\n                                        <Guage space={item[getdate[count]]} color={color[i]} totalcases={totalcases[getdate[count]]} total={item.timeline.cases[getdate[count]]} />\r\n                                        <Text style={{padding:'0',position:'absolute'}}>{item.country} ( {item.timeline.cases[getdate[count]]} cases)</Text>\r\n                                    </Wrap>\r\n                                </Bar>\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\nimport Covidglobal from './component/covidGlobalCases'\nimport Charts from './component/covidtest'\n\nfunction App() {\n  return (\n    <>\n      <Covidglobal />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}