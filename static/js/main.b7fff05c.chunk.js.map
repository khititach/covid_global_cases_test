{"version":3,"sources":["component/covidGlobalCases.js","component/covidglobalcasesv2.js","component/covidtest.js","App.js","reportWebVitals.js","index.js"],"names":["RandomNumber","Math","floor","random","CovidGlobalCases","SomeLoadingScreen","Covid19GlobalCases","useState","loading","setLoading","nameCountry","setNameCountry","date","setDate","data","setData","mostCase","setMostCase","color","setColor","positionBar","setPositionBar","useEffect","axios","get","then","res","nameOfCountry","countryName","forEach","item","push","country","getNameCountry","urlGetData","mostCasesArr","dataProcess","filter","getDate","Object","keys","timeline","cases","dataPositionPerDay","allCasesPerDay","dayItem","dayIndex","casesMax","max","map","index","sort","a","b","assign","beforePosition","getCountryData","randomColor","colorArr","i","length","toString","substr","RandomColor","countday","setCountday","setTimeout","className","barWidth","parseInt","positionCountry","style","top","transition","width","styled","div","props","total","totalcases","toFixed","space","p","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7fff05c.chunk.js","sourcesContent":["/* eslint-disable no-template-curly-in-string */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React , {useState , useEffect} from 'react'\r\nimport './style.scss'\r\n\r\nfunction RandomNumber () {\r\n    return Math.floor(Math.random() * 100); \r\n}\r\n\r\n\r\nconst num_test = [ \r\n    { \r\n        \"Country\":'1',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'2',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'3',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'4',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'5',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'6',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'7',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'8',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'9',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n    { \r\n        \"Country\":'10',\r\n        \"num\": RandomNumber(),\r\n        'timeline':{}\r\n    },\r\n       \r\n]\r\n\r\n  \r\nfunction SomeLoadingScreen () {\r\n    return (\r\n        <div>\r\n            Loading Data\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction CovidGlobalCases () {\r\n        \r\n        // loading data\r\n    const [loading, setLoading] = useState(true)\r\n\r\n        // date 1 month\r\n    const [Date , setDate] = useState([])\r\n        // data country > Country Name , date , cases 1 month\r\n    const [Data , setData] = useState([])\r\n        // country Position \r\n    const [CountryPosition , setCountryPosition] = useState([])\r\n        // most case\r\n    const [mostCase , setmostCase] = useState([])\r\n        // bar color\r\n    const [barColor, setbarColor] = useState([])\r\n\r\n        // test num\r\n    const [numTest, setnumTest] = useState(num_test)\r\n\r\n        // url get country \r\n    const urlGetCountry = 'https://disease.sh/v3/covid-19/countries?yesterday=false&twoDaysAgo=false&allowNull=false'\r\n        // url get specify > https://disease.sh/v3/covid-19/historical/[country]?lastdays=30\r\n    const urlusa = 'https://disease.sh/v3/covid-19/historical/usa?lastdays=30'\r\n        // url get total cases\r\n    const urlTotalCases = 'https://disease.sh/v3/covid-19/historical/all?lastdays=30';\r\n\r\n    useEffect(async() => {\r\n        const CountryName = [];\r\n        const barColorArr = [];\r\n        // const mostCases = [];\r\n\r\n            // get name country\r\n        await fetch(urlGetCountry)\r\n        .then(res => res.json())\r\n        .then(DataCountry => {\r\n            DataCountry.forEach((data , index) => {\r\n                // console.log(data);\r\n                CountryName.push(data.country)\r\n\r\n                // random color\r\n                let color = '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6)\r\n                barColorArr.push(color)\r\n            });\r\n            // console.log(CountryName);\r\n\r\n                // get data specify country\r\n            fetch('https://disease.sh/v3/covid-19/historical/'+CountryName+'?lastdays=30')\r\n            .then(res => res.json())\r\n            .then(async res => {\r\n                // console.log(res);\r\n\r\n                    // delete country empty data\r\n                const DataProcess = res.filter(country => country.country)\r\n                    // get date\r\n                const getDate = Object.keys(DataProcess[0].timeline.cases);\r\n                setDate(getDate)\r\n\r\n                    // set Data\r\n                setData(DataProcess)\r\n                // console.log(Data);\r\n                    // set color\r\n                setbarColor(barColorArr)\r\n\r\n                    // view data\r\n                // console.log('Date : ',Date);\r\n                // console.log('Data : ',Data);\r\n                // console.log('barColor : ',barColor);\r\n\r\n                    // process most cases per day\r\n                const mostCasesArr = [];     \r\n                const positionCountryArr = [];\r\n             \r\n                Date.forEach((dayitem , dayindex ,array ) => {\r\n                    const casesmax = Math.max(...Data.map(item => item.timeline.cases[dayitem]))\r\n                    mostCasesArr.push(casesmax)\r\n\r\n                        // position \r\n                        // console.log(array.length);\r\n                    \r\n                })\r\n            \r\n                setmostCase(mostCasesArr)\r\n               \r\n                \r\n               \r\n                \r\n                setLoading(false)\r\n                // console.log(loading);\r\n                // if (Date.length === 30) {\r\n                //     setLoading(false)\r\n                // } \r\n                \r\n             \r\n            })\r\n            .catch(err => console.log(err))\r\n            \r\n        })\r\n        .catch(err => console.log(err))\r\n\r\n\r\n    },[])\r\n\r\n    // useEffect(() => {\r\n    //     if (mostCase.length !== 0) {\r\n    //         setLoading(false)\r\n    //     }\r\n    // })\r\n\r\n\r\n        // count day\r\n    const [countday , setcountday] = useState(0)\r\n    useEffect(() => {\r\n        if (countday >= 29 ) {\r\n            setTimeout(()=>{\r\n                setcountday(0)\r\n            },3000)\r\n        } else {\r\n            setTimeout(()=>{\r\n                setcountday(countday + 1 )\r\n            },1000)\r\n        }\r\n    })\r\n\r\n    if (loading) { return <SomeLoadingScreen />} else {\r\n        return (\r\n            <div className=\"header\">\r\n                    {/* Header title */}\r\n                <div className=\"header-title\">\r\n                    <span>COVID GLOBAL CASES</span>\r\n                </div>\r\n                    {/* count day */}\r\n                <div className=\"count-day\">\r\n                    <span>Day : {Date[countday]} </span>\r\n                </div>\r\n\r\n                <div className=\"test-data\">\r\n                    {/* <span>Total cases : {TotalCases.cases['11/3/20']}</span> */}\r\n                </div>\r\n\r\n                    {/* chart bar */}\r\n                <div className=\"chart-body\">\r\n                    <div className=\"chart-text\">\r\n                        \r\n                            {Data.map((item ,index) => {\r\n                                let cases = item.timeline.cases[Date[countday]];\r\n                                // console.log(mostCase[0][Date[countday]]);\r\n                                const barWidth = parseInt((cases/mostCase[countday])*100)+'%'\r\n                                // console.log(barWidth);\r\n                                const topPosition = ''+ index * 60  + 'px'\r\n\r\n                                const randColor = barColor[index]\r\n                                \r\n                                return(\r\n                                    <div key={index} className=\"country-bar\" style={{top:topPosition, transition:'all 0.3s'}}>\r\n                                        <div className=\"bg-bar\" style={{'backgroundColor':randColor,width:barWidth, transition:'all 0.3s'}}></div>\r\n                                        <span className=\"country-text\">{item.country} (cases : {cases})  </span>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n\r\n                            {/* <div className=\"country-bar\" style={{top:'50px'}}>\r\n                                    <div className=\"bg-bar\" style={{backgroundColor:'red',width:'100%', transition:'all 0.3s'}}></div>\r\n                                    <span className=\"country-text\">Country_1 cases :95</span>\r\n                                </div>\r\n                                <div className=\"country-bar\" style={{top:'100px'}}>\r\n                                    <div className=\"bg-bar\" style={{backgroundColor:'red',width:'70%', transition:'all 0.3s'}}></div>\r\n                                    <span className=\"country-text\">Country_2 cases :80</span>\r\n                                </div>\r\n                                <div className=\"country-bar\" style={{top:'150px'}}>\r\n                                    <div className=\"bg-bar\" style={{backgroundColor:'red',width:'70%', transition:'all 0.3s'}}></div>\r\n                                    <span className=\"country-text\">Country_2 cases :80</span>\r\n                                </div> */}\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default CovidGlobalCases;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React , {useState , useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport './style.scss'\r\n\r\n\r\nfunction getNameCountry (data) {\r\n    const countryName = [];\r\n    const country = data.data\r\n    country.forEach(item => {\r\n        countryName.push(item.country)\r\n    });\r\n    return countryName\r\n}\r\n\r\nfunction getCountryData (data) {\r\n    const mostCasesArr = [];   \r\n    const countryData = data.data\r\n    const dataProcess = countryData.filter(country => country.country)\r\n    const getDate = Object.keys(dataProcess[0].timeline.cases);\r\n\r\n    const dataPositionPerDay = [];  \r\n    let allCasesPerDay = [];\r\n\r\n    getDate.forEach((dayItem , dayIndex ) => {\r\n        const casesMax = Math.max(...dataProcess.map(item => item.timeline.cases[dayItem]))\r\n        mostCasesArr.push(casesMax)\r\n\r\n        dataProcess.map((item , index) => {\r\n            allCasesPerDay[index] = {'country':item.country,'cases':item.timeline.cases[dayItem],'beforePosition':index+1}\r\n        })\r\n\r\n        dataPositionPerDay[dayItem] = allCasesPerDay\r\n        allCasesPerDay = [];\r\n\r\n        dataPositionPerDay[dayItem].sort((a,b) => { \r\n            return b.cases - a.cases\r\n        })\r\n\r\n        dataPositionPerDay[dayItem].forEach((item ,index) => {\r\n            Object.assign(item,{'positionBar':index})\r\n        })\r\n\r\n        dataPositionPerDay[dayItem].sort((a,b) => { \r\n            return a.beforePosition - b.beforePosition\r\n        })\r\n\r\n    })\r\n    return [dataProcess , getDate , mostCasesArr , dataPositionPerDay]\r\n}\r\n\r\nfunction RandomColor (data) {\r\n    const colorArr = []\r\n    for (let i = 0; i < data.length; i++) {\r\n        colorArr.push( '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6))\r\n    }\r\n   return colorArr\r\n}\r\n\r\nfunction SomeLoadingScreen () {\r\n    return (\r\n        <div>\r\n            Loading Data\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Covid19GlobalCases () {\r\n    const [loading, setLoading ] = useState(true)\r\n    const [nameCountry , setNameCountry] = useState([])\r\n    const [date , setDate] = useState([])\r\n    const [data , setData] = useState([])\r\n    const [mostCase , setMostCase] = useState([])\r\n    const [color , setColor] = useState([])\r\n    const [positionBar , setPositionBar ] = useState([])\r\n\r\n    useEffect(() => {\r\n\r\n        const urlGetCountry = 'https://disease.sh/v3/covid-19/countries?yesterday=false&twoDaysAgo=false&allowNull=false'\r\n        axios.get(urlGetCountry)\r\n        .then(res => {\r\n            const nameOfCountry = getNameCountry(res)\r\n            setNameCountry(nameOfCountry)\r\n        })\r\n\r\n        const urlGetData = 'https://disease.sh/v3/covid-19/historical/'+nameCountry+'?lastdays=30'\r\n        axios.get(urlGetData)\r\n        .then(res => {\r\n            const [dataProcess , getDate , mostCasesArr , dataPositionPerDay] = getCountryData(res)\r\n            const randomColor = RandomColor(dataProcess)\r\n            setDate(getDate)\r\n            setData(dataProcess)\r\n            setMostCase(mostCasesArr)\r\n            setColor(randomColor)\r\n            setPositionBar(dataPositionPerDay)\r\n            setLoading(false)\r\n        })\r\n\r\n    },[])\r\n\r\n    const [countday , setCountday] = useState(0)\r\n    useEffect(() => {\r\n        if (countday >= 29 ) {\r\n            setTimeout(()=>{\r\n                setCountday(0)\r\n            },3000)\r\n        } else {\r\n            setTimeout(()=>{\r\n                setCountday(countday + 1 )\r\n            },1000)\r\n        }\r\n    })\r\n\r\n    if (loading) { return <SomeLoadingScreen />} else {\r\n    return(\r\n        <div className=\"header\">\r\n                <div className=\"header-title\">\r\n                    <span>COVID GLOBAL CASES</span>\r\n                </div>\r\n                <div className=\"count-day\">\r\n                    <span>Day : {date[countday]}</span>\r\n                </div>\r\n                <div className=\"chart-body\">\r\n                    <div className=\"chart-text\">\r\n                        {data.map((item , index ) => {\r\n                            const cases = item.timeline.cases[date[countday]];\r\n                            const barWidth = parseInt((cases/mostCase[countday])*100)+'%'\r\n                            const positionCountry = positionBar[date[countday]][index].positionBar ;\r\n                            return(\r\n                                <div key={index} className=\"country-bar\" style={{top:positionCountry*60+'px', transition:'all 0.3s'}}>\r\n                                    <div className=\"bg-bar\" style={{'backgroundColor':color[index],width:barWidth, transition:'all 0.3s'}}></div>\r\n                                    <span className=\"country-text\">{item.country} (cases : {cases}) </span>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Covid19GlobalCases;","import React,{useEffect, useState} from 'react'\r\n// import { Helmet } from \"react-helmet\"\r\nimport styled from 'styled-components'\r\nimport './style.scss'\r\n\r\nconst Wrap = styled.div`\r\n    transition: all 0.3s;\r\n    position: relative;\r\n    width:100%;\r\n`\r\n\r\nconst Guage = styled.div`\r\n    position: absolute;\r\n    transition: all 0.3s;\r\n    height: 30px;\r\n    background-color: ${props => props.color};\r\n    width: ${props => parseInt((((props.total*100)/props.totalcases)*5).toFixed(0))}%;\r\n`\r\n\r\nconst Bar = styled.div`\r\n  position: absolute;\r\n  transition: all 0.3s;\r\n  width: 100%;\r\n  top: ${props => props.space*7}%;\r\n`\r\nconst Text = styled.p`\r\n    position : absolute;\r\n    left: 15px;\r\n    top: 7px;\r\n    padding: 0;\r\n    margin : 0;\r\n`\r\n\r\nconst randomColor = () => {\r\n    return '#' + ('00000' + (Math.random() * 16777216 << 0).toString(16)).substr(-6);\r\n}\r\n\r\nexport default function Charts(props) {\r\n\r\n    const [totalcases,setTotalcases] = useState([])\r\n    const [getdate,setDate] = useState([])\r\n    const [count,setCount] = useState(0)\r\n    const [data,setData] = useState([])\r\n    const [color,setColor] = useState([])\r\n    useEffect(()=>{\r\n        fetch('https://disease.sh/v3/covid-19/countries?yesterday=false&twoDaysAgo=false&sort=cases&allowNull=false')\r\n        .then(res=> res.json())\r\n        .then((result)=>{\r\n            let newData = []\r\n            let country = \"\"\r\n            let color = []\r\n            // console.log(result);\r\n            result.forEach((item)=>{ \r\n                newData.push(item.countryInfo.iso3);\r\n                color.push(randomColor())\r\n            });\r\n            country = newData.join(',');\r\n            setColor(color)\r\n            // console.log(color);\r\n            fetch(`https://disease.sh/v3/covid-19/historical/${country}?lastdays=30`)\r\n            .then(res=> res.json())\r\n            .then((results)=>{\r\n                let dataArr = results.filter(item=> item.country)\r\n                let dateList = Object.keys(results[0].timeline.cases)\r\n                setDate(Object.keys(results[0].timeline.cases))\r\n                // console.log(dataArr);\r\n                fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=30')\r\n                .then(res=> res.json())\r\n                .then((dataResult)=>{\r\n                    setTotalcases(dataResult.cases);\r\n                    for(let i = 0; i <= 29; i++) {\r\n                        let element = dataArr.sort((a,b)=> b.timeline.cases[dateList[i]] - a.timeline.cases[dateList[i]])\r\n                        element.forEach((items,index)=>{\r\n                            items[`${dateList[i]}`] = index\r\n                        });\r\n                    }\r\n                    setData(dataArr) \r\n                })\r\n                .catch((err)=>{\r\n                    console.log(err)\r\n                })\r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n            })\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n       \r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(count >= 29) {\r\n            setTimeout(()=>{\r\n                setCount(0)\r\n            },2000)\r\n        } else {\r\n            setTimeout(()=>{\r\n                setCount(count+1)\r\n            },500)\r\n        }\r\n    })\r\n    \r\n    return (\r\n        <>\r\n \r\n            <meta charSet=\"utf-8\" />\r\n            <title>Covid-19 Report</title>\r\n\r\n            <div className={'chart-section'}>\r\n                <div className={'top-section'}>\r\n                    <h1>COVID-19 Global Cases</h1>\r\n                    <h3>Date : {getdate[count]}</h3>\r\n                </div>\r\n                <div className={'data-wrap'}>\r\n                    <div className={'data-section'}>\r\n                        { \r\n                            data\r\n                            .map((item,i)=>{\r\n                            return <Bar key={i} space={item[getdate[count]]} totalcases={totalcases[getdate[count]]} total={item.timeline.cases[getdate[count]]} >\r\n                                    <Wrap>\r\n                                        <Guage space={item[getdate[count]]} color={color[i]} totalcases={totalcases[getdate[count]]} total={item.timeline.cases[getdate[count]]} />\r\n                                        <Text style={{padding:'0',position:'absolute'}}>{item.country} ( {item.timeline.cases[getdate[count]]} cases)</Text>\r\n                                    </Wrap>\r\n                                </Bar>\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\nimport Covidglobal from './component/covidGlobalCases'\nimport Covidglobalv2 from './component/covidglobalcasesv2'\nimport Charts from './component/covidtest'\n\nfunction App() {\n  return (\n    <>\n      <Covidglobalv2 />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}